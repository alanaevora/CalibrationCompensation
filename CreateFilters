import tkinter as tk
from tkinter import *
from pubsub import pub
from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure
import numpy as np
import sounddevice as sd
import soundfile as sf
import scipy
from scipy import signal
import matplotlib.pyplot as plt
import tkscrolledframe as sframe

class CreateFiltersModel:
    def __init__(self):
        return

    # controller > model (receiver)
    def create_filters_func(self, low_freq, high_freq, sample_rate, nfft):
        self.low_freq = low_freq
        self.high_freq = high_freq
        self.sample_rate = sample_rate
        self.nfft = nfft
        print("model - creating filters")
        print("low freq : " + str(low_freq))
        print("high freq: " + str(high_freq))
        print("sample rate: " + str(sample_rate))
        print("nfft: " + str(nfft))
        # code to actually create the filter here

        self.filter_calc()

        # added random figure for now
        # self.fig = Figure(figsize=(5, 2), dpi=100)
        # self.t = np.arange(0, 3, .01)
        # self.fig.add_subplot(111).plot(self.t, 2 * np.sin(2 * np.pi * self.t))
        # self.display_filters()

    # while editing, all of the checks will appear in the console (not the ui)
    def filter_calc(self):
        print("in the filter_cal function")
        # fs = self.sample_rate # will get sampling rate from entry box
        # nfft = self.nfft      # will get nfft from entry box
        # VALUES FROM USER
        fs = 48000              # only use for testing < DELETE LATER
        nfft = 100              # only use for testing < DELETE LATER

        # CREATING THE RANDOM NOISE
        pb = np.random.rand(2 * fs) - 0.5  # generate 2 sec of random noise (vector of evenly spaced random nums)
        win = np.ones(len(pb))  # array of 1s that is the length of the random noise
        ramp = np.linspace(0, np.pi, round(fs/5))   # creates a vector = linspace(min(x), max(x), #points)
        win[0:len(ramp)] = 0.5*np.sin(ramp-np.pi/2) + 0.5   # gradually taper at the beginning
        win[len(win) - len(ramp) : len(win)] = 0.5 * np.cos(ramp) + 0.5  # gradually taper at the end
        pb = pb * win

        # # UNCOMMENT & PRESS GENERATE FILTERS BUTTON TO SEE THE FIGURES BELOW
        # # for testing... view the window
        # self.fig = Figure(figsize=(5, 5), dpi=100)
        # self.fig_text = "window"
        # self.t = np.arange(0, 960, .01)
        # self.fig.add_subplot(111).plot(self.t, win)
        # self.display_filters()
        # # for testing... view the random noise
        # self.fig = Figure(figsize=(5, 5), dpi=100)
        # self.fig_text = "pb"
        # self.t = np.arange(0, 960, .01)
        # self.fig.add_subplot(111).plot(self.t, pb)
        # self.display_filters()

        # ADDING PADDING TO THE RANDOM NOISE
        padding = np.zeros(round(fs/6))  # array of 0s that is 1/6 of the length of the window
        pb1 = []
        pb1 = np.append(pb1, padding)
        pb1 = np.append(pb1, pb)
        pb1 = np.append(pb1, padding)
        pb1 = np.append(pb1, padding)
        pb1 = np.append(pb1, padding)

        # for testing... view the noise > DELETE LATER
        self.fig = Figure(figsize=(5, 5), dpi=100)
        self.fig_text = "pb1"
        self.t = np.arange(0, 1280, .01)
        self.fig.add_subplot(111).plot(self.t, pb1)
        self.display_filters()

        # SAVE THE NOISE
        pb8ch = pb1     # for testing I dont have 8 channels > FIX LATER
        sf.write('Noise_8ch.wav', pb8ch, fs)  # create wave file & save the random noise in it
        file_reader, sample_rate = sf.read('Noise_8ch.wav')  # open & read random noise file

        # FOR TESTING AT HOME I AM GOING TO USE 1 channel
        print("AVAILABLE CHANNELS: \n" + str(sd.query_devices()))
        print("USING THESE CHANNELS: " + str(sd.default.device))

        # RECORDING
        # record to wave file source: https://python-sounddevice.readthedocs.io/en/0.4.1/usage.html#recording
        # possible source for APO: https://python-sounddevice.readthedocs.io/en/0.3.11/#sounddevice.AsioSetting
        print("RECORDING...")
        audio_recorded = sd.playrec(file_reader, fs, channels=1)  # playing and recording simultaneously & saving audio as NumPy array
        sd.wait()  # wait for the recording to finish before moving on
        sf.write('pre-rec.wav', audio_recorded, fs)  # write the audio recorded to file

        # ADJUSTING THE AMP
        pre_rec, sample_rate = sf.read('pre-rec.wav')  # open the recorded file
        # for testing... view the recording > DELETE LATER
        self.fig = Figure(figsize=(5, 5), dpi=100)
        self.fig_text = "pre_rec"
        self.t = np.arange(0, 1280, .01)
        self.fig.add_subplot(111).plot(self.t, pre_rec)
        self.display_filters()

        if max(abs(pre_rec)) > 0.2:                # still need to figure out what this is doing
            print("exceeds max amp")
            adjust = 0.2 / max(abs(pre_rec))
            pb8ch = adjust * pb8ch
            sf.write('Noise_8ch.wav', pb8ch, fs)
        else:
            print("below max amp")

        # OPEN THE FILES TO BE FILTERED
        iterations = [1, 2, 3, 4]
        for iter in iterations:
            if iter == 1:
                file_reader, sample_rate = sf.read('Noise_8ch.wav')  # if 1st iteration, open the random noise file
            else:
                file_reader, sample_rate = sf.read('Noise_8ch_f.wav')  # if not 1st iteration, open the filter file

            # RECORDING
            print("RECORDING...")
            audio_recorded = sd.playrec(file_reader, fs, channels=1)  # playing and recording simultaneously & saving audio as NumPy array
            sd.wait()  # wait for the recording to finish before moving on
            sf.write('Rec_8ch.wav', audio_recorded, fs)  # write the audio recorded to file

            # CONVERT FILTERS BETWEEN SENSORS
            # is there something in python to convert sensor to calibrate output?
            rec_c = []  # save the sensor conversion filters in rec_c

            # ADJUST LENGTH OF CONVERTED OUTPUT

            # PLOT THE RECORDED WAVE FORMS
            # low_freq = self.low_freq      # will get the low_freq from the user
            # high_freq = self.high_freq    # will get the hig_freq from the user
            low_freq = 200                  # for testing > DELETE LATER
            high_freq = 800                 # for testing > DELETE LATER
            lo = np.math.floor(low_freq / (fs / nfft))
            print("lo " + str(lo))
            hi = np.math.floor(high_freq / (fs / nfft))
            print("hi " + str(hi))

            # GETTING THE AMP SPEC OF THE ORIGINAL (EITHER RANDOM NOISE OR PREVIOUSLY FILTERED NOISE)
            rec_c_spect = []
            for s in pb8ch:
                # for each filter, calculate the amplitude spec and save it in an array
                rec_c_spect = np.append(rec_c_spect, scipy.signal.welch(s))

            # make plots here

            # GETTING THE AMP SPEC OF THE RECORDINGS
            input_spect = []
            for s in pb8ch:
                # for each filter, calculate the amplitude spec and save it in an array
                input_spect = np.append(input_spect, scipy.signal.welch(s))

            # MINIMIZE OUT OF RANGE FREQS
            r = []
            for s in pb8ch:
                # compare the input amp spec and the recorded amp spec (to determine which freqs are being affected by the substrate)
                r = np.apend(r, np.divide(input_spect, rec_c_spect))

            # "erasing" points in the amp spec that are outside of the freq range specified by the user
            r[1:lo, :] = 0          # silencing values that go under the low freq
            r[hi + 10: -1, :] = 0   # silencing values that go over the high freq

            # CREATING FILTERS
            fr = np.linspace(0, 1, len(r))

            b = []
            for s in pb8ch:
                # b = np.apend(b, signal.firwin2())
                # scipy.signal.firwin2(numtaps, freq, gain, nfreqs, window='hamming', antisymmatric, fs=None)

                # scipy.signal.firwin2(numtaps, freq, gain, nfreqs, window='hamming', antisymmatric, fs=None)
                # numtaps = length of filter ie number of coefficients ie filter order + 1 = ?
                # gain = filter gains at freq sampling points = ?
                # nfreqs = size of interpolation mesh used to construct filter =
                # window = window = hamming
                # nyq = nyquist frequency
                # antisymmetric = whether resulting impulse is symmetrical or not = false
                # fs = sampling rate = fs
                # RETURNS = filter coefficients of the IFR filter as 1-D array  of length numtaps

            a = np.zeros(len(b))    # creating padding
            a[1, :] = 1             # setting the beginning of the padding to 1

            # FILTER THE ORIGINAL (OR PREVIOUSLY FILTERED NOISE)
            if iter == 1:
                for s in pb8ch:
                    # w[:, s] =  # filter func using pb8ch as input
            else:
                w = []  # clear it
                for s in pb8ch:
                    # w[:, s] =  # filter func using pb8ch_f as input

            # SAVE THE FILTERED NOISE
            # avoid clipping: multiply the filters by adding padding
            wn = np.multiply(w, 1. / (10 * max(w)))
            sf.write('Noise_8ch_f.wav', wn, fs)

            iter = iter + 1 # move onto next iteration

        # DESIGN THE OVERALL FILTER & SAVE IT
        final_spect = np.zeros((nfft/2 + 1), 8) # is this a window?

        for s in pb8ch:
            # final_spect[:, s] = pwelch()

        rf = np.zeros(len(final_spect))

        for s in signal:
            rf[:, s] = np.divide(final_spect[:, s], input_spect)

        rf[1: lo, :] = 0                    # silencing values that go under the low freq specified by user
        rf[hi: len(rf), :] = 0              # silencing values that go over the high freq specified by user
        frf = np.linspace(0, 1, len(rf))    # ?
        rf = np.divide(rf, 1.05 * max (rf)) # ?
        # save rf in file 'rf'

        # DESIGN FILTERS
        for s in pb8ch:
            # bf[:, s] = signal.firwin2

        # af = np.zeros(len(bf))
        # af[1, :] = 1
        # save bf in file 'b8'
        # save af in file 'a8'




    # model > controller (sender)
    def display_filters(self):
        print("model - filters ready")
        pub.sendMessage("Displaying_Filters")

    def get_fig(self):
        return self.fig

    def get_fig_text(self):
        return self.fig_text


class CreateFiltersView:
    # Constructor: initialize variables
    def __init__(self, parent):
        self.parent = parent     # The frame the widgets are packed in

        # settings:
        self.p_color = '#004393'  # primary color -   main background
        self.s_color = '#3A8504'  # secondary color - frame color
        self.t_color = '#87CA0C'  # tertiary color -  accent color
        self.h_font = 'calibri 40'  # header font
        self.sh_font = 'verdana 15'  # subheader font
        self.r_font = 'calibri 10'  # regular font
        return

    # this method runs first, and calls the methods below
    def setup(self):
        self.create_widgets()
        self.setup_layout()

    # creates the widgets
    def create_widgets(self):
        # creating the main frames
        self.main_frame = tk.Frame(self.parent, width=1200, height=750,
                                   background=self.p_color)  # main frame that holds the widgets
        self.scrollable_frame = sframe.ScrolledFrame(self.main_frame, width=1200, height=750, background=self.p_color)
        # Bind the arrow keys and scroll wheel
        self.scrollable_frame.bind_arrow_keys(self.main_frame)
        self.scrollable_frame.bind_scroll_wheel(self.main_frame)
        # creating a frame within the ScrolledFrame
        # main screen image
        self.inner_frame = self.scrollable_frame.display_widget(Frame, width=1175, height=744, background=self.p_color)
        self.inner_main_frame = Frame(self.inner_frame, height=2000, width=1100)    # main frame that holds the widgets
        self.title = Label(self.inner_main_frame, text="Create Filters", font="systemSystemFont 30")
        self.left_frame = Frame(self.inner_main_frame)                        # frame that holds the figures on the left
        self.right_frame = Frame(self.inner_main_frame)                       # frame that holds the input boxes on the right
        # widgets inside left frame - freq range
        self.freq_range_frame = tk.LabelFrame(self.left_frame, text="Frequency range") # freq range box
        self.low_freq_frame = tk.Frame(self.freq_range_frame)
        self.low_freq_label = tk.Label(self.low_freq_frame, text="Low freq")
        self.low_freq_ctrl = tk.Entry(self.low_freq_frame, width=8)
        self.high_freq_frame = tk.Frame(self.freq_range_frame)
        self.high_freq_label = tk.Label(self.high_freq_frame, text="High freq")
        self.high_freq_ctrl = tk.Entry(self.high_freq_frame, width=8)
        # widgets inside left frame - sampling rate
        self.sample_nfft_frame = tk.LabelFrame(self.left_frame, text="Sampling rate")  # sample rate box
        self.sample_rate_frame = tk.Frame(self.sample_nfft_frame)
        self.sample_rate_label = tk.Label(self.sample_rate_frame, text="Sampling rate")
        self.sample_rate_ctrl = tk.Entry(self.sample_rate_frame, width=8)
        self.nfft_frame = tk.Frame(self.sample_nfft_frame)
        self.nfft_label = tk.Label(self.nfft_frame, text="nfft")
        self.nfft_ctrl = tk.Entry(self.nfft_frame, width=8)
        # widgets inside left frame - create filters button
        self.create_filters = tk.Button(self.left_frame, text="Generate Compensation Filters", width=24,
                                        command=self.create_filters)
        # widgets inside right frame - figures
        self.filters_frame = tk.LabelFrame(self.right_frame, text="Filters")


    # packs (orients) the widgets
    def setup_layout(self):
        # orienting the main frames
        self.main_frame.pack(pady=10)
        self.main_frame.pack_propagate(0)
        self.scrollable_frame.pack(side=TOP, fill="both")
        self.inner_main_frame.pack(pady=10)
        self.inner_main_frame.pack_propagate(0)
        self.title.pack(pady=10, padx=10)
        self.right_frame.pack(side='right', anchor='n', fill='both')
        self.left_frame.pack(side='left', anchor='n')
        # orienting the widgets inside the left frame - freq range
        self.freq_range_frame.pack(expand="yes", anchor="nw", padx=10)
        self.low_freq_frame.pack(expand='yes', fill='x')
        self.low_freq_label.pack(side='left', padx=10, pady=5)
        self.low_freq_ctrl.pack(side='right', pady=5)
        self.high_freq_frame.pack(expand='yes', fill='x')
        self.high_freq_label.pack(side='left', padx=10, pady=5)
        self.high_freq_ctrl.pack(side='right', pady=5)
        # orienting the widgets inside the left frame - sampling rate
        self.sample_nfft_frame.pack(expand="yes", anchor="nw", padx=10)
        self.sample_rate_frame.pack(expand='yes', fill='x')
        self.sample_rate_label.pack(side='left', padx=10, pady=5)
        self.sample_rate_ctrl.pack(side='right', pady=5)
        self.nfft_frame.pack(expand='yes', fill='x')
        self.nfft_label.pack(side='left', padx=10, pady=5)
        self.nfft_ctrl.pack(side='right', pady=5)
        # orienting the widgets inside the left frame - create filters button
        self.create_filters.pack(side="bottom", pady=10, fill='both')
        # orienting the widgets inside left frame - figures
        self.filters_frame.pack(expand='yes', fill='y')

    def get_low_freq(self):
        return self.low_freq_ctrl.get()
    def get_high_freq(self):
        return self.high_freq_ctrl.get()
    def get_sample_rate(self):
        return self.sample_rate_ctrl.get()
    def get_nfft(self):
        return self.nfft_ctrl.get()

    # view > controller (sender)
    def create_filters(self):
        print("view - create_filters")                          # prints to console
        pub.sendMessage("Create_Filters_Button_Pressed")        # sends message to controller

    # controller > view (reciever)
    def display_filters_func(self, fig, fig_text):
        print("view - display_filters")                         # prints to console
        self.create_filter_widgets(fig, fig_text)               # create filter widgets
        self.setup_filters_layout()                             # orient filter widgets
    def create_filter_widgets(self, fig, fig_text):
        self.channel_frame = tk.Frame(self.filters_frame, background=self.t_color)
        self.label = tk.Label(self.channel_frame, text=fig_text, background=self.t_color)
        self.canvas = FigureCanvasTkAgg(fig, master=self.channel_frame)
        self.toolbar = NavigationToolbar2Tk(self.canvas, self.channel_frame)
    def setup_filters_layout(self):
        self.channel_frame.pack(fill='both', anchor='nw')
        self.label.pack(side='left', anchor='n')
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(side='left', fill='both', expand=1, anchor="n")
        self.toolbar.update()
        self.canvas.get_tk_widget().pack(side='left', fill='both', expand=1, anchor="n")

class CreateFiltersController:
    # Constructor: initialize variables
    def __init__(self, parent):
        self.parent_create = parent
        self.model_create = CreateFiltersModel()
        self.view_create = CreateFiltersView(self.parent_create)
        self.view_create.setup()

        # view > controller
        pub.subscribe(self.create_filters_button_pressed, "Create_Filters_Button_Pressed")

        # model > controller
        pub.subscribe(self.display_filters, "Displaying_Filters")

    # controller > model
    def create_filters_button_pressed(self):
        print("controller - create filter button pressed")      # prints to console
        self.low_freq = self.view_create.get_low_freq()
        self.high_freq = self.view_create.get_high_freq()
        self.sample_rate = self.view_create.get_sample_rate()
        self.nfft = self.view_create.get_nfft()
        self.model_create.create_filters_func(self.low_freq, self.high_freq, self.sample_rate, self.nfft)

    # controller > view
    def display_filters(self):
        print("controller - displaying filters")               # prints to console
        self.fig = self.model_create.get_fig()
        self.fig_text = self.model_create.get_fig_text()
        self.view_create.display_filters_func(self.fig, self.fig_text)

# Can run this file in its own window here (not part of the main window)
if __name__ == "__main__":
    window = Tk()
    WIDTH = 1200
    HEIGHT = 750
    window.geometry("%sx%s" % (WIDTH, HEIGHT))
    window.title("Create Filter File")

    app = CreateFiltersController(window)
    window.mainloop()
